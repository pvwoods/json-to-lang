import { LangGenerator } from '../../base/generator/LangGenerator'
import { JSONTypeTree } from '../../../struct/JSONTypeTree'
import { PHPClassIndentableOutput } from '../output/PHPClassIndentableOutput';
import { IndentableOutput as iom } from '../../base/output/IndentableOutput'
import { StringUtils } from '../../../utils/StringUtils'

class PHPGenerator implements LangGenerator {

    private _tree:JSONTypeTree;
    private _classIO:PHPClassIndentableOutput[];

    constructor() {
        this._classIO = [];
    }

    public generate(tree:JSONTypeTree):string {
        this._tree = tree
        var io:PHPClassIndentableOutput = new PHPClassIndentableOutput(this._tree.key);
        this._generate_node(this._tree, io);
        return this.preamble(this._tree.key).concat(
            this.mergedClasses()
        ).output;
    }

    protected mergedClasses():iom.IndentableOutput {
        var io:iom.IndentableOutput = new iom.IndentableOutput();
        for(var child of this._classIO) io.concat(child).addLineToOutput();
        return io.addLineToOutput();
    }

    public preamble(className:string):iom.IndentableOutput {
        var io:iom.IndentableOutput = new iom.IndentableOutput();
        io.addLineToOutput("<?PHP").addLineToOutput();
        io.addLineToOutput("/**");
        io.addLineToOutput(" * This PHP code is auto generated by Jsonerator").addLineToOutput(" *");
        io.addLineToOutput(` * Example Usage: $myVar = ${className}::fromString($jsonString);`);
        return io.addLineToOutput(" **/").addLineToOutput();
    }

    protected _generate_node(node:JSONTypeTree, io:PHPClassIndentableOutput, parentIsArray:boolean=false):PHPClassIndentableOutput {
        if(node.isIterableType) {
            if(node.isArray) {
                return io.insertVariableDecleration(`public \$${this.convertToValidVariableName(node.key)};`);
            } else {
                return this._generateObject(node, io);
            }
        } else {
            if(parentIsArray) {
                return io
            } else {
                io.insertLineAtConstructor(`\$this->${this.convertToValidVariableName(node.key)} = $jsonObj->{"${node.key}"};`);
                return io.insertVariableDecleration(`public \$${this.convertToValidVariableName(node.key)};`);
            }
        }
    }

    protected _generateArray(node:JSONTypeTree, io:PHPClassIndentableOutput):PHPClassIndentableOutput {
        return io
    }

    protected _generateObject(node:JSONTypeTree, io:PHPClassIndentableOutput):PHPClassIndentableOutput {
        var newClassIO:PHPClassIndentableOutput = new PHPClassIndentableOutput(StringUtils.camelCase(node.path, false));
        this._classIO.push(newClassIO);
        for(var child of node.children) {
            this._generate_node(child, newClassIO);
        }
        io.insertLineAtConstructor(`\$this->${this.convertToValidVariableName(node.key)} = new ${StringUtils.camelCase(node.path, false)}($jsonObj->{"${node.key}"});`);
        return io.insertVariableDecleration(`public \$${this.convertToValidVariableName(node.key)};`);
    }

    public escapeValue(n:any):string {
        return (isNaN(n) && typeof(n) !== "boolean") ? ("\"" + n + "\""):n;
    }

    public emit():string {
        return "";
    }

    public convertToValidVariableName(key:string):string {
        return StringUtils.slugify(key);
    }

}

export { PHPGenerator }